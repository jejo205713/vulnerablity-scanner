import nmap
import os
import subprocess
from tqdm import tqdm



# INTRO - BLAH BLAH
def print_ascii_art():
    os.system("figlet 'WEB-PROWLER'")
    print("""
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚£†‚£º‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£¶‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∂‚£§‚£Ä‚£Ä‚£Ä‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£†‚£¥‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†∑‚¢¶‚†Ä‚£π‚£∂‚£ø‚£¶‚£ø‚°ò‚£á‚†Ä‚†Ä‚†Ä‚¢∞‚†æ‚£ø‚£ø‚£ø‚£ü‚£ª‚£ø‚£ø‚£ø‚£∑‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£§‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚¢∫‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚¢ü‚£•‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚°è‚¢π‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Æ‚£ù‚¢∑‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢õ‚£ø‚£ø‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†õ‚£ø‚£ø‚£∑‚°Ä‚†ò‚¢ø‚£ß‚£ª‚°∑‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£ø‚£ü‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ù‚¢ß‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£æ‚£ø‚†ü‚£°‚£æ‚£ø‚£ø‚£ß‚£ø‚°ø‚£ã‚£¥‚£ø‚£ø‚£ø‚£ø‚£ß‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ª‚£ø‚£ø‚£ø‚£∂‚°Ñ‚†ô‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚£ø‚£ø‚£ø‚£ø‚£∑‚£ù‚¢ª‚£ø‚£ü‚£ø‚£ø‚£∑‚£Æ‚°ô‚¢ø‚£Ω‚£Ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ø‚¢ã‚£¥‚£ø‚£ø‚£ø‚£ø‚£ø‚£º‚£Ø‚£æ‚£ø‚£ø‚°ø‚£ª‚£ø‚£ø‚£ø‚£¶‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£π‚£ø‚£ø‚£ø‚£ø‚£∂‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚£ø‚£ø‚£ø‚£ø‚†ª‚£ø‚£ø‚£ø‚£Æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°ô‚¢ø‚£á‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚£†‚°è‚£∞‚£ø‚£ø‚°ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚¢ã‚£º‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°§‚†Ä‚£†‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£Ñ‚†Ä‚¢†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚°ú‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ø‚£ø‚£ø‚£¶‚°ô‚£¶‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚£∞‚¢ø‚£ø‚£ø‚†ü‚†ã‚£†‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚†õ‚¢°‚£æ‚°ø‚¢ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ø‚†ã‚†ª‚£ø‚°ü‚£ø‚£ø‚£ø‚†ª‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ü‚†ª‚£ø‚£Ü‚†ô‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£¶‚°à‚†ª‚£ø‚£ø‚£ü‚£ß‚†Ä‚†Ä
‚†Ä‚£∞‚¢£‚£ø‚°ø‚†É‚£†‚°æ‚†ü‚†Å‚†Ä‚£∏‚£ø‚°ü‚†Å‚¢Ä‚£ø‚†ã‚¢†‚£ø‚°è‚£ø‚£ø‚£ø‚£ø‚£ø‚¢ø‚†Å‚¢Ä‚£†‚£¥‚¢ø‚£∑‚£ø‚£ø‚£ø‚†Ä‚†Ä‚†Ω‚¢ª‚£ø‚£ø‚£ø‚£ø‚°º‚£ø‚°á‚†à‚¢ø‚°Ü‚†Ä‚†ª‚£ø‚£ß‚†Ä‚†à‚†ô‚¢ø‚£Ü‚†à‚†ª‚£ø‚£é‚¢ß‚†Ä
‚†Ä‚¢£‚£ø‚†ü‚¢Ä‚°º‚†ã‚†Ä‚†Ä‚¢Ä‚£¥‚†ø‚†ã‚†Ä‚†Ä‚£æ‚°ü‚†Ä‚¢∏‚£ø‚†ô‚£ø‚†É‚†ò‚¢ø‚°ü‚†Ä‚£∞‚¢ª‚†ü‚†ª‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ä‚†Ä‚†Ä‚†ò‚£ø‚†ã‚†Ä‚£ø‚°á‚£ø‚°á‚†Ä‚†∏‚£ø‚°Ñ‚†Ä‚†à‚†ª‚£∑‚£Ñ‚†Ä‚†Ä‚†ô‚¢∑‚°Ä‚†ô‚£ø‚£Ü‚†Å
‚¢Ä‚£ø‚°è‚†Ä‚°û‚†Å‚¢Ä‚°†‚†û‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Ä‚†Ä‚†Ä‚†ø‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚£ø‚£∞‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†Ä‚†∏‚†É‚†Ä‚†Ä‚†à‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†≥‚¢§‚£Ä‚†Ä‚†π‚°Ñ‚†ò‚£ø‚°Ñ
‚£∏‚°ü‚†Ä‚£∞‚£ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ø‚†ø‚†ø‚†ü‚†Å‚†Ä‚†π‚£ø‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚£ø‚£ß‚†Ä‚¢π‚£∑
‚£ø‚†É‚¢†‚°ø‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢†‚£Ñ‚£§‚£Ä‚†Ä‚†Ä‚£ø‚£ø‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚°á‚†Ä‚£ø
‚£ø‚†Ä‚¢∏‚†Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚°ø‚†ã‚†â‚¢ª‚£ß‚¢Ä‚£ø‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£ø‚†Ä‚¢∏
‚°á‚†Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚£ß‚°Ä‚†Ä‚†Ä‚£ø‚£æ‚°ü‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†Ä‚¢∏
‚¢∏‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†ª‚†ø‚£ø‚£ø‚†ü‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°æ
‚†à‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£∞‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†É
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚°è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£ß‚¢Ä‚£æ‚£§‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚°º‚£ø‚£ø‚£æ‚£§‚£†‚°º‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
""")
    print("####################################################################################################################")
    print("#  The script scans the target IP and checks whether it has any open ports and whether it could be exploited...üöÄ  #")
    print("####################################################################################################################")
    print("‚ö†Ô∏è CAUTION:It is only for educational purpose not be used unethically...!")
    print("CREDITS:\n üöÄ JEJO_J \n üöÄPADMESH_PS \n üöÄPRIYADHARSHAN_V")



#first scan function 1:
def port_scan(target_ip, arguments):
    nm = nmap.PortScanner()
    nm.scan(hosts=target_ip, arguments=arguments)

    vulnerabilities_found = False

    for host in nm.all_hosts():
        print(f"Open ports for {host}:")
        for proto in nm[host].all_protocols():
            ports = nm[host][proto].keys()

            # Initialize tqdm progress bar
            total_ports = len(list(ports))
            progress_bar = tqdm(ports, desc=f"Scanning ports for {host}", unit="port")

            for port in progress_bar:
                service = nm[host][proto][port]
                print(f"Port {port}/{proto} is open. Service: {service['name']}, Version: {service['product']} {service['version']}")
                vulnerabilities_found |= check_exploits(service)

    return vulnerabilities_found

def check_exploits(service):
    product = service['product']
    version = service['version']

    if product and version:
        print(f"Checking Exploit Database for {product} {version}...")
        search_result = subprocess.run(['searchsploit', f'{product} {version}'], stdout=subprocess.PIPE, text=True)

        if search_result.returncode == 0:
            exploits = search_result.stdout.strip().split('\n')
            if exploits:
                print("Possible exploits found:")
                for exploit in exploits:
                    print(exploit)
                return True  # Vulnerability found
            else:
                print("No exploits found.")
        else:
            print("Error occurred while searching Exploit Database.")
    else:
        print("Product or version information not available for exploitation check.")

    return False  # No vulnerability found


#MAIN FUCNTION :
if __name__ == "__main__":
    print_ascii_art()  # Print Figlet ASCII art
    while True:
        print("\nMenu:")
        print("1. Port Scan (1000 ports) *faster ")
        print("2. Port Scan (all 6000 ports) *slower")
        print("3. Stealth Scan (-sS)")
        print("4. nslookup")
        print("0. Exit")

        choice = input("Enter your choice (0-3): ")

        if choice == '0':
            break
        elif choice == '1':
            target_ip = input("Enter the target IP address: ")
            vulnerabilities_found = port_scan(target_ip, '-p 1-1000 -sV')

            if vulnerabilities_found:
                os.system("cowsay 'The server is vulnerable...!'")

        elif choice == '2':
            target_ip = input("Enter the target IP address: ")
            vulnerabilities_found = port_scan(target_ip, '-p 1-6000 -sV')

            if vulnerabilities_found:
                os.system("cowsay 'The server is vulnerable...!'")

        elif choice == '3':
            print("########################################################################")
            print("## Safer option to scan and to be sneaky,requires root privilages...! ##")
            print("########################################################################")
            print("\nuse $ SUDO PYTHON VULN.PY")
            target_ip = input("Enter the target IP address: ")
            vulnerabilities_found = port_scan(target_ip, '-sS')

            if vulnerabilities_found:
                os.system("cowsay 'The server is vulnerable...!'")
        elif choice == '4':
            print("#########################################################")
            print("## nslookup searches and finds the website IP add ...! ##")
            print("#########################################################")
            target = input("\nEnter the website name or address : ")
            os.system(f"nslookup {target}")
        else:
            os.system("cowsay 'Invalid choice. Please enter a valid option.'")


